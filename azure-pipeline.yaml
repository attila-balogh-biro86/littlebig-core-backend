trigger:
  branches:
    include:
      - feature/*
      - main

variables:

  - name: MAVEN_CACHE_FOLDER
    value: $(HOME)/.m2/repository

  - name: MAVEN_OPTS
    value: -Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)

  - name: imageRepository
    value: $(artifactFinalName)

  - name: containerRegistry
    value: $(containerRegistryUrl)

  - name: defaultAgentVMImageName
    value: 'ubuntu-latest'

  - name: defaultAgentPoolName
    value: 'Azure Pipelines'

  - name: artifactFinalName
    value: 'littlebig-core-backend'

  - name: azureServicePrincipalId
    value: '56b77bc3-0f1d-4992-b24f-45348d9e0017'

  - name: azureTenantId
    value: 0f9e35db-544f-4f60-bdcc-5ea416e6dc70

#Your build pipeline references an undefined variable named ‘Parameters.mavenPOMFile’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972

stages:
  - stage: Build
    displayName: Build project
    variables:
      - group: dev
    pool:
      name: $(defaultAgentPoolName)
      demands: maven
    jobs:
      - job: build
        displayName: Build
        pool:
          vmImage: $(defaultAgentVMImageName)
        steps:

          - task: Cache@2
            displayName: Cache Maven local repo
            inputs:
              key: 'maven | "$(Agent.OS)" | **/pom.xml'
              restoreKeys: |
              path: $(MAVEN_CACHE_FOLDER)

          - task: Maven@3
            displayName: 'Maven build'
            inputs:
              mavenPomFile: '$(system.defaultworkingdirectory)/pom.xml'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'

          - task: CopyFiles@2
            displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
            inputs:
              SourceFolder: '$(system.defaultworkingdirectory)'
              Contents: '**/*'
              TargetFolder: '$(build.artifactstagingdirectory)'
            condition: succeeded()

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact: $(artifactFinalName)'
            inputs:
              PathtoPublish: '$(build.artifactstagingdirectory)'
              ArtifactName: $(artifactFinalName)
            condition: succeeded()

          - task: Bash@3
            displayName: Build and Push Docker Image
            inputs:
              targetType: inline
              script: |
                echo "Logging in to Azure with service principal..."
                az login --service-principal -u $(azureServicePrincipalId) -p $(azureServicePrincipalPassword) --tenant $(azureTenantId)
                # Log in to Docker with service principal credentials
                ACCESS_TOKEN=$(az acr login --name unapimcontainerregistry --expose-token --output tsv --query accessToken)
                if [ -z "$ACCESS_TOKEN" ]; then
                     echo "Failed to get access token for ACR"
                     exit 1
                fi
                docker login unapimcontainerregistry.azurecr.io --username 00000000-0000-0000-0000-000000000000 --password-stdin <<< $ACCESS_TOKEN
                if [ $? -ne 0 ]; then
                     echo "ACR login failed"
                     exit 1
                fi
                docker build -f $(Build.SourcesDirectory)/Dockerfile -t unapimcontainerregistry.azurecr.io/$(artifactFinalName):$(Build.BuildNumber) $(Build.SourcesDirectory)
                if [ $? -ne 0 ]; then
                     echo "Docker build failed"
                     exit 1
                fi
                docker push unapimcontainerregistry.azurecr.io/$(artifactFinalName):$(Build.BuildNumber)
                if [ $? -ne 0 ]; then
                     echo "Docker push failed"
                     exit 1
                fi
            condition: succeeded()